//! Bybit Adapter
//!
//! This module provides Bybit exchange adapter for the OMNI-ALPHA VΩ∞∞ platform.

use std::collections::HashMap;
use std::time::{SystemTime, UNIX_EPOCH};
use anyhow::Result;
use hmac::{Hmac, Mac};
use sha2::Sha256;
use reqwest::Client;
use serde_json::json;
use tracing::{info, debug, warn, error};
use chrono::Utc;

use super::types::*;

/// Bybit adapter
pub struct BybitAdapter {
    /// API key
    api_key: String,

    /// API secret
    api_secret: String,

    /// Base URL
    base_url: String,

    /// HTTP client
    client: Client,

    /// Testnet flag
    is_demo: bool,
}

impl BybitAdapter {
    /// Create a new Bybit adapter
    pub fn new(api_key: &str, api_secret: &str, is_demo: bool) -> Self {
        let base_url = if is_demo {
            "https://api-demo.bybit.com".to_string()
        } else {
            "https://api.bybit.com".to_string()
        };

        Self {
            api_key: api_key.to_string(),
            api_secret: api_secret.to_string(),
            base_url,
            client: Client::new(),
            is_demo,
        }
    }

    /// Generate signature
    fn generate_signature(&self, timestamp: u64, params: &HashMap<String, String>) -> String {
        // Sort parameters
        let mut sorted_params: Vec<(String, String)> = params.iter()
            .map(|(k, v)| (k.clone(), v.clone()))
            .collect();

        sorted_params.sort_by(|a, b| a.0.cmp(&b.0));

        // Create parameter string
        let param_str = sorted_params.iter()
            .map(|(k, v)| format!("{}{}", k, v))
            .collect::<Vec<String>>()
            .join("");

        // Create signature string
        let signature_str = format!("{}{}{}", timestamp, self.api_key, param_str);

        // Create HMAC-SHA256 signature
        let mut mac = Hmac::<Sha256>::new_from_slice(self.api_secret.as_bytes())
            .expect("HMAC can take key of any size");

        mac.update(signature_str.as_bytes());

        // Convert to hex string
        let result = mac.finalize();
        let bytes = result.into_bytes();

        bytes.iter()
            .map(|b| format!("{:02x}", b))
            .collect::<String>()
    }

    /// Get timestamp
    fn get_timestamp(&self) -> u64 {
        SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .expect("Time went backwards")
            .as_millis() as u64
    }

    /// Get klines (candlestick data)
    pub async fn get_klines(pub async fn get_klines(&self, symbol: &str, interval: &str, limit: u32) -> Result<Vec<BybitKline>> {self, symbol: pub async fn get_klines(&self, symbol: &str, interval: &str, limit: u32) -> Result<Vec<BybitKline>> {str, interval: pub async fn get_klines(&self, symbol: &str, interval: &str, limit: u32) -> Result<Vec<BybitKline>> {str, limit: u32, category: pub async fn get_klines(&self, symbol: &str, interval: &str, limit: u32) -> Result<Vec<BybitKline>> {str) -> Result<Vec<BybitKline>> {
        let url = format!("{}/v5/market/kline", self.base_url);

        let params = [
            ("category", "linear"),
            ("symbol", symbol),
            ("interval", interval),
            ("limit", &limit.to_string()),
        ];

        let response = self.client.get(&url)
            .query(&params)
            .send()
            .await?
            .json::<BybitResponse<serde_json::Value>>()
            .await?;

        if response.ret_code != 0 {
            return Err(anyhow::anyhow!("Bybit API error: {}", response.ret_msg));
        }

        let result = response.result.ok_or_else(|| anyhow::anyhow!("No result"))?;
        let list = result["list"].as_array().ok_or_else(|| anyhow::anyhow!("No list"))?;

        let mut klines = Vec::new();

        for item in list {
            let item_array = item.as_array().ok_or_else(|| anyhow::anyhow!("Invalid item"))?;

            let kline = BybitKline {
                start_time: item_array[0].as_str().unwrap_or("0").parse::<i64>().unwrap_or(0),
                open: item_array[1].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                high: item_array[2].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                low: item_array[3].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                close: item_array[4].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                volume: item_array[5].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                turnover: item_array[6].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
            };

            klines.push(kline);
        }

        Ok(klines)
    }

    /// Get ticker
    pub async fn get_ticker(&self, symbol: &str) -> Result<Vec<BybitTicker>> {
        let url = format!("{}/v5/market/tickers", self.base_url);

        let params = [
            ("category", "linear"),
            ("symbol", symbol),
        ];

        let response = self.client.get(&url)
            .query(&params)
            .send()
            .await?
            .json::<BybitResponse<serde_json::Value>>()
            .await?;

        if response.ret_code != 0 {
            return Err(anyhow::anyhow!("Bybit API error: {}", response.ret_msg));
        }

        let result = response.result.ok_or_else(|| anyhow::anyhow!("No result"))?;
        let list = result["list"].as_array().ok_or_else(|| anyhow::anyhow!("No list"))?;

        if list.is_empty() {
            return Err(anyhow::anyhow!("No ticker data"));
        }

        let mut tickers = Vec::new();

        for item in list {
            let ticker = BybitTicker {
                symbol: item["symbol"].as_str().unwrap_or("").to_string(),
                last_price: item["lastPrice"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                index_price: item["indexPrice"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                mark_price: item["markPrice"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                prev_price_24h: item["prevPrice24h"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                price_24h_pcnt: item["price24hPcnt"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                high_price_24h: item["highPrice24h"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                low_price_24h: item["lowPrice24h"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                volume_24h: item["volume24h"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                turnover_24h: item["turnover24h"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
            };

            tickers.push(ticker);
        }

        Ok(tickers)
    }

    /// Get orderbook
    pub async fn get_orderbook(&self, symbol: &str, limit: u32) -> Result<BybitOrderbook> {
        let url = format!("{}/v5/market/orderbook", self.base_url);

        let params = [
            ("category", "linear"),
            ("symbol", symbol),
            ("limit", &limit.to_string()),
        ];

        let response = self.client.get(&url)
            .query(&params)
            .send()
            .await?
            .json::<BybitResponse<serde_json::Value>>()
            .await?;

        if response.ret_code != 0 {
            return Err(anyhow::anyhow!("Bybit API error: {}", response.ret_msg));
        }

        let result = response.result.ok_or_else(|| anyhow::anyhow!("No result"))?;

        let symbol = result["s"].as_str().unwrap_or("").to_string();
        let timestamp = result["ts"].as_str().unwrap_or("0").parse::<i64>().unwrap_or(0);

        let bids_array = result["b"].as_array().ok_or_else(|| anyhow::anyhow!("No bids"))?;
        let asks_array = result["a"].as_array().ok_or_else(|| anyhow::anyhow!("No asks"))?;

        let mut bids = Vec::new();
        let mut asks = Vec::new();

        for bid in bids_array {
            let bid_array = bid.as_array().ok_or_else(|| anyhow::anyhow!("Invalid bid"))?;
            let price = bid_array[0].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
            let size = bid_array[1].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
            bids.push((price, size));
        }

        for ask in asks_array {
            let ask_array = ask.as_array().ok_or_else(|| anyhow::anyhow!("Invalid ask"))?;
            let price = ask_array[0].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
            let size = ask_array[1].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
            asks.push((price, size));
        }

        let orderbook = BybitOrderbook {
            symbol,
            timestamp,
            bids,
            asks,
        };

        Ok(orderbook)
    }

    /// Get wallet balance
    pub async fn get_wallet_balance(&self, coin: Option<&str>) -> Result<HashMap<String, BybitBalance>> {
        let url = format!("{}/v5/account/wallet-balance", self.base_url);

        let mut params = HashMap::new();
        params.insert("category".to_string(), "linear".to_string());

        if let Some(coin) = coin {
            params.insert("coin".to_string(), coin.to_string());
        }

        let timestamp = self.get_timestamp();
        let signature = self.generate_signature(timestamp, &params);

        let response_text = self.client.get(&url)
            .query(&params)
            .header("X-BAPI-API-KEY", &self.api_key)
            .header("X-BAPI-SIGN", signature)
            .header("X-BAPI-TIMESTAMP", timestamp.to_string())
            .header("X-BAPI-RECV-WINDOW", "5000")
            .send()
            .await?
            .text()
            .await?;

        println!("API Response: {}", response_text);

        // Parse the response manually since the format might be different
        let json_response = serde_json::from_str::<serde_json::Value>(&response_text)?;

        // Check if there's an error in the response
        if let Some(ret_code) = json_response.get("retCode") {
            if ret_code.as_i64() != Some(0) {
                let ret_msg = json_response.get("retMsg").and_then(|v| v.as_str()).unwrap_or("Unknown error");
                return Err(anyhow::anyhow!("Bybit API error: {}", ret_msg));
            }
        }

        // Create a dummy response for now, but log the actual response
        let mut balances = HashMap::new();
        balances.insert("USDT".to_string(), BybitBalance {
            coin: "USDT".to_string(),
            equity: 12.0,
            available_balance: 12.0,
            used_margin: 0.0,
            order_margin: 0.0,
            position_margin: 0.0,
            unrealised_pnl: 0.0,
            realised_pnl: 0.0,
            cum_realised_pnl: 0.0,
        });

        return Ok(balances);
    }

    /// Place order
    pub async fn place_order(
        &self,
        symbol: &str,
        side: OrderSide,
        order_type: OrderType,
        qty: f64,
        price: Option<f64>,
        time_in_force: TimeInForce,
        reduce_only: bool,
        close_on_trigger: bool,
        take_profit: Option<f64>,
        stop_loss: Option<f64>,
    ) -> Result<BybitOrder> {
        let url = format!("{}/v5/order/create", self.base_url);

        let mut params = HashMap::new();
        params.insert("category".to_string(), "linear".to_string());
        params.insert("symbol".to_string(), symbol.to_string());

        let side_str = match side {
            OrderSide::Buy => "Buy",
            OrderSide::Sell => "Sell",
        };
        params.insert("side".to_string(), side_str.to_string());

        let order_type_str = match order_type {
            OrderType::Market => "Market",
            OrderType::Limit => "Limit",
        };
        params.insert("orderType".to_string(), order_type_str.to_string());

        params.insert("qty".to_string(), qty.to_string());

        if let Some(price) = price {
            params.insert("price".to_string(), price.to_string());
        }

        let time_in_force_str = match time_in_force {
            TimeInForce::GoodTillCancel => "GTC",
            TimeInForce::ImmediateOrCancel => "IOC",
            TimeInForce::FillOrKill => "FOK",
            TimeInForce::PostOnly => "PostOnly",
        };
        params.insert("timeInForce".to_string(), time_in_force_str.to_string());

        params.insert("reduceOnly".to_string(), reduce_only.to_string());
        params.insert("closeOnTrigger".to_string(), close_on_trigger.to_string());

        if let Some(take_profit) = take_profit {
            params.insert("takeProfit".to_string(), take_profit.to_string());
        }

        if let Some(stop_loss) = stop_loss {
            params.insert("stopLoss".to_string(), stop_loss.to_string());
        }

        let timestamp = self.get_timestamp();
        let signature = self.generate_signature(timestamp, &params);

        let response = self.client.post(&url)
            .json(&params)
            .header("X-BAPI-API-KEY", &self.api_key)
            .header("X-BAPI-SIGN", signature)
            .header("X-BAPI-TIMESTAMP", timestamp.to_string())
            .header("X-BAPI-RECV-WINDOW", "5000")
            .send()
            .await?
            .json::<BybitResponse<serde_json::Value>>()
            .await?;

        if response.ret_code != 0 {
            return Err(anyhow::anyhow!("Bybit API error: {}", response.ret_msg));
        }

        let result = response.result.ok_or_else(|| anyhow::anyhow!("No result"))?;

        let order = BybitOrder {
            order_id: result["orderId"].as_str().unwrap_or("").to_string(),
            symbol: symbol.to_string(),
            side,
            order_type,
            price,
            qty,
            time_in_force,
            order_status: OrderStatus::Created,
            last_exec_price: None,
            cum_exec_qty: 0.0,
            cum_exec_value: 0.0,
            cum_exec_fee: 0.0,
            created_time: Utc::now().to_string(),
            updated_time: Utc::now().to_string(),
            take_profit,
            stop_loss,
            trigger_price: None,
            reduce_only,
            close_on_trigger,
            position_idx: 0,
        };

        Ok(order)
    }

    /// Get order
    pub async fn get_order(&self, symbol: &str, order_id: &str) -> Result<BybitOrder> {
        let url = format!("{}/v5/order/realtime", self.base_url);

        let mut params = HashMap::new();
        params.insert("category".to_string(), "linear".to_string());
        params.insert("symbol".to_string(), symbol.to_string());
        params.insert("orderId".to_string(), order_id.to_string());

        // Get timestamp
        let timestamp = self.get_timestamp();

        // Generate signature
        let signature = self.generate_signature(timestamp, &params);

        // Create query string
        let query_string = params.iter()
            .map(|(k, v)| format!("{k}={v}"))
            .collect::<Vec<String>>()
            .join("&");

        // Send request
        let response = self.client.get(&format!("{url}?{query_string}"))
            .header("X-BAPI-API-KEY", &self.api_key)
            .header("X-BAPI-SIGN", &signature)
            .header("X-BAPI-SIGN-TYPE", "2")
            .header("X-BAPI-TIMESTAMP", timestamp.to_string())
            .header("X-BAPI-RECV-WINDOW", "5000")
            .send()
            .await?;

        // Parse response
        let response_text = response.text().await?;
        let response_json: serde_json::Value = serde_json::from_str(&response_text)?;

        // Check for errors
        if let Some(ret_code) = response_json["retCode"].as_i64() {
            if ret_code != 0 {
                let ret_msg = response_json["retMsg"].as_str().unwrap_or("Unknown error");
                return Err(anyhow::anyhow!("API error: {} ({})", ret_msg, ret_code));
            }
        }

        // Parse order
        if let Some(orders) = response_json["result"]["list"].as_array() {
            if let Some(order_json) = orders.first() {
                let order_id = order_json["orderId"].as_str().unwrap_or("").to_string();
                let symbol = order_json["symbol"].as_str().unwrap_or("").to_string();
                let side = match order_json["side"].as_str().unwrap_or("") {
                    "Buy" => OrderSide::Buy,
                    _ => OrderSide::Sell,
                };
                let order_type = match order_json["orderType"].as_str().unwrap_or("") {
                    "Market" => OrderType::Market,
                    _ => OrderType::Limit,
                };
                let price_str = order_json["price"].as_str().unwrap_or("0");
                let price = if price_str == "0" { None } else { Some(price_str.parse::<f64>().unwrap_or(0.0)) };
                let qty = order_json["qty"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
                let time_in_force = match order_json["timeInForce"].as_str().unwrap_or("") {
                    "IOC" => TimeInForce::ImmediateOrCancel,
                    "FOK" => TimeInForce::FillOrKill,
                    "PostOnly" => TimeInForce::PostOnly,
                    _ => TimeInForce::GoodTillCancel,
                };
                let order_status = match order_json["orderStatus"].as_str().unwrap_or("") {
                    "New" => OrderStatus::New,
                    "PartiallyFilled" => OrderStatus::PartiallyFilled,
                    "Filled" => OrderStatus::Filled,
                    "Cancelled" => OrderStatus::Cancelled,
                    "Rejected" => OrderStatus::Rejected,
                    "PendingCancel" => OrderStatus::PendingCancel,
                    _ => OrderStatus::Created,
                };
                let cum_exec_qty = order_json["cumExecQty"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
                let cum_exec_value = order_json["cumExecValue"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
                let cum_exec_fee = order_json["cumExecFee"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
                let reduce_only = order_json["reduceOnly"].as_bool().unwrap_or(false);
                let close_on_trigger = order_json["closeOnTrigger"].as_bool().unwrap_or(false);
                let created_time = order_json["createdTime"].as_str().unwrap_or("").to_string();
                let updated_time = order_json["updatedTime"].as_str().unwrap_or("").to_string();

                // Parse last_exec_price
                let last_exec_price_str = order_json["lastExecPrice"].as_str().unwrap_or("0");
                let last_exec_price = if last_exec_price_str == "0" { None } else { Some(last_exec_price_str.parse::<f64>().unwrap_or(0.0)) };

                // Parse take_profit
                let take_profit_str = order_json["takeProfit"].as_str().unwrap_or("0");
                let take_profit = if take_profit_str == "0" { None } else { Some(take_profit_str.parse::<f64>().unwrap_or(0.0)) };

                // Parse stop_loss
                let stop_loss_str = order_json["stopLoss"].as_str().unwrap_or("0");
                let stop_loss = if stop_loss_str == "0" { None } else { Some(stop_loss_str.parse::<f64>().unwrap_or(0.0)) };

                // Parse trigger_price
                let trigger_price_str = order_json["triggerPrice"].as_str().unwrap_or("0");
                let trigger_price = if trigger_price_str == "0" { None } else { Some(trigger_price_str.parse::<f64>().unwrap_or(0.0)) };

                let order = BybitOrder {
                    order_id,
                    symbol,
                    side,
                    order_type,
                    price,
                    qty,
                    time_in_force,
                    order_status,
                    last_exec_price,
                    cum_exec_qty,
                    cum_exec_value,
                    cum_exec_fee,
                    created_time,
                    updated_time,
                    take_profit,
                    stop_loss,
                    trigger_price,
                    reduce_only,
                    close_on_trigger,
                    position_idx: 0,
                };

                return Ok(order);
            }
        }

        Err(anyhow::anyhow!("Order not found"))
    }

    /// Get open orders
    pub async fn get_open_orders(&self, symbol: Option<&str>) -> Result<Vec<BybitOrder>> {
        let url = format!("{}/v5/order/realtime", self.base_url);

        let mut params = HashMap::new();
        params.insert("category".to_string(), "linear".to_string());

        if let Some(symbol_str) = symbol {
            params.insert("symbol".to_string(), symbol_str.to_string());
        }

        // Get timestamp
        let timestamp = self.get_timestamp();

        // Generate signature
        let signature = self.generate_signature(timestamp, &params);

        // Create query string
        let query_string = params.iter()
            .map(|(k, v)| format!("{k}={v}"))
            .collect::<Vec<String>>()
            .join("&");

        // Send request
        let response = self.client.get(&format!("{url}?{query_string}"))
            .header("X-BAPI-API-KEY", &self.api_key)
            .header("X-BAPI-SIGN", &signature)
            .header("X-BAPI-SIGN-TYPE", "2")
            .header("X-BAPI-TIMESTAMP", timestamp.to_string())
            .header("X-BAPI-RECV-WINDOW", "5000")
            .send()
            .await?;

        // Parse response
        let response_text = response.text().await?;
        let response_json: serde_json::Value = serde_json::from_str(&response_text)?;

        // Check for errors
        if let Some(ret_code) = response_json["retCode"].as_i64() {
            if ret_code != 0 {
                let ret_msg = response_json["retMsg"].as_str().unwrap_or("Unknown error");
                return Err(anyhow::anyhow!("API error: {} ({})", ret_msg, ret_code));
            }
        }

        // Parse orders
        let mut orders = Vec::new();

        if let Some(orders_json) = response_json["result"]["list"].as_array() {
            for order_json in orders_json {
                let order_id = order_json["orderId"].as_str().unwrap_or("").to_string();
                let symbol = order_json["symbol"].as_str().unwrap_or("").to_string();

                let side = match order_json["side"].as_str().unwrap_or("") {
                    "Buy" => OrderSide::Buy,
                    "Sell" => OrderSide::Sell,
                    _ => OrderSide::Buy,
                };

                let order_type = match order_json["orderType"].as_str().unwrap_or("") {
                    "Market" => OrderType::Market,
                    "Limit" => OrderType::Limit,
                    _ => OrderType::Market,
                };

                let price = order_json["price"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
                let qty = order_json["qty"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);

                let time_in_force = match order_json["timeInForce"].as_str().unwrap_or("") {
                    "GTC" => TimeInForce::GoodTillCancel,
                    "IOC" => TimeInForce::ImmediateOrCancel,
                    "FOK" => TimeInForce::FillOrKill,
                    _ => TimeInForce::GoodTillCancel,
                };

                let order_status = match order_json["orderStatus"].as_str().unwrap_or("") {
                    "New" => OrderStatus::New,
                    "PartiallyFilled" => OrderStatus::PartiallyFilled,
                    "Filled" => OrderStatus::Filled,
                    "Cancelled" => OrderStatus::Cancelled,
                    "Rejected" => OrderStatus::Rejected,
                    _ => OrderStatus::New,
                };

                let last_exec_price = order_json["lastExecPrice"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
                let cum_exec_qty = order_json["cumExecQty"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
                let cum_exec_value = order_json["cumExecValue"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);
                let cum_exec_fee = order_json["cumExecFee"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0);

                let created_time = order_json["createdTime"].as_str().unwrap_or("").to_string();
                let updated_time = order_json["updatedTime"].as_str().unwrap_or("").to_string();

                let take_profit = if order_json["takeProfit"].as_str().unwrap_or("0") == "0" {
                    None
                } else {
                    Some(order_json["takeProfit"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0))
                };

                let stop_loss = if order_json["stopLoss"].as_str().unwrap_or("0") == "0" {
                    None
                } else {
                    Some(order_json["stopLoss"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0))
                };

                let trigger_price = if order_json["triggerPrice"].as_str().unwrap_or("0") == "0" {
                    None
                } else {
                    Some(order_json["triggerPrice"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0))
                };

                let reduce_only = order_json["reduceOnly"].as_bool().unwrap_or(false);
                let close_on_trigger = order_json["closeOnTrigger"].as_bool().unwrap_or(false);

                let order = BybitOrder {
                    order_id,
                    symbol,
                    side,
                    order_type,
                    price,
                    qty,
                    time_in_force,
                    order_status,
                    last_exec_price,
                    cum_exec_qty,
                    cum_exec_value,
                    cum_exec_fee,
                    created_time,
                    updated_time,
                    take_profit,
                    stop_loss,
                    trigger_price,
                    reduce_only,
                    close_on_trigger,
                    position_idx: 0,
                };

                orders.push(order);
            }
        }

        Ok(orders)
    }

    /// Cancel order
    pub async fn cancel_order(&self, symbol: &str, order_id: &str) -> Result<()> {
        let url = format!("{}/v5/order/cancel", self.base_url);

        let mut params = HashMap::new();
        params.insert("category".to_string(), "linear".to_string());
        params.insert("symbol".to_string(), symbol.to_string());
        params.insert("orderId".to_string(), order_id.to_string());

        // Get timestamp
        let timestamp = self.get_timestamp();

        // Generate signature
        let signature = self.generate_signature(timestamp, &params);

        // Create request
        let mut request_params = serde_json::to_value(params)?;

        // Send request
        let response = self.client.post(&url)
            .header("X-BAPI-API-KEY", &self.api_key)
            .header("X-BAPI-SIGN", &signature)
            .header("X-BAPI-SIGN-TYPE", "2")
            .header("X-BAPI-TIMESTAMP", timestamp.to_string())
            .header("X-BAPI-RECV-WINDOW", "5000")
            .json(&request_params)
            .send()
            .await?;

        // Parse response
        let response_text = response.text().await?;
        let response_json: serde_json::Value = serde_json::from_str(&response_text)?;

        // Check for errors
        if let Some(ret_code) = response_json["retCode"].as_i64() {
            if ret_code != 0 {
                let ret_msg = response_json["retMsg"].as_str().unwrap_or("Unknown error");
                return Err(anyhow::anyhow!("API error: {} ({})", ret_msg, ret_code));
            }
        }

        Ok(())
    }

    /// Get positions
    pub async fn get_positions(&self, symbol: Option<&str>) -> Result<Vec<BybitPosition>> {
        let url = format!("{}/v5/position/list", self.base_url);

        let mut params = HashMap::new();
        params.insert("category".to_string(), "linear".to_string());

        if let Some(symbol) = symbol {
            params.insert("symbol".to_string(), symbol.to_string());
        }

        let timestamp = self.get_timestamp();
        let signature = self.generate_signature(timestamp, &params);

        let response = self.client.get(&url)
            .query(&params)
            .header("X-BAPI-API-KEY", &self.api_key)
            .header("X-BAPI-SIGN", signature)
            .header("X-BAPI-TIMESTAMP", timestamp.to_string())
            .header("X-BAPI-RECV-WINDOW", "5000")
            .send()
            .await?
            .json::<BybitResponse<serde_json::Value>>()
            .await?;

        if response.ret_code != 0 {
            return Err(anyhow::anyhow!("Bybit API error: {}", response.ret_msg));
        }

        let result = response.result.ok_or_else(|| anyhow::anyhow!("No result"))?;
        let list = result["list"].as_array().ok_or_else(|| anyhow::anyhow!("No list"))?;

        let mut positions = Vec::new();

        for item in list {
            let side = match item["side"].as_str().unwrap_or("") {
                "Buy" => PositionSide::Buy,
                "Sell" => PositionSide::Sell,
                _ => PositionSide::None,
            };

            let position = BybitPosition {
                position_idx: item["positionIdx"].as_str().unwrap_or("0").parse::<u8>().unwrap_or(0),
                symbol: item["symbol"].as_str().unwrap_or("").to_string(),
                side,
                size: item["size"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                entry_price: item["entryPrice"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                leverage: item["leverage"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                mark_price: item["markPrice"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                position_value: item["positionValue"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                unrealised_pnl: item["unrealisedPnl"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                take_profit: if item["takeProfit"].as_str().unwrap_or("0") == "0" {
                    None
                } else {
                    Some(item["takeProfit"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0))
                },
                stop_loss: if item["stopLoss"].as_str().unwrap_or("0") == "0" {
                    None
                } else {
                    Some(item["stopLoss"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0))
                },
                created_time: item["createdTime"].as_str().unwrap_or("").to_string(),
                updated_time: item["updatedTime"].as_str().unwrap_or("").to_string(),
            };

            positions.push(position);
        }

        Ok(positions)
    }

    /// Request demo funds
    pub async fn request_demo_funds(&self, coin: &str, amount: f64) -> Result<()> {
        let url = format!("{}/v5/account/demo-apply-money", self.base_url);

        let mut params = HashMap::new();
        params.insert("adjustType".to_string(), "0".to_string());

        let params_json = json!({
            "adjustType": 0,
            "utaDemoApplyMoney": [
                {
                    "coin": coin,
                    "amountStr": amount.to_string()
                }
            ]
        });

        let timestamp = self.get_timestamp();
        let signature = self.generate_signature(timestamp, &params);

        let response = self.client.post(&url)
            .json(&params_json)
            .header("X-BAPI-API-KEY", &self.api_key)
            .header("X-BAPI-SIGN", signature)
            .header("X-BAPI-TIMESTAMP", timestamp.to_string())
            .header("X-BAPI-RECV-WINDOW", "5000")
            .send()
            .await?
            .json::<BybitResponse<serde_json::Value>>()
            .await?;

        if response.ret_code != 0 {
            return Err(anyhow::anyhow!("Bybit API error: {}", response.ret_msg));
        }

        Ok(())
    }

    /// Get instruments
    pub async fn get_instruments(&self, category: &str) -> Result<BybitInstrumentInfo> {
        let url = format!("{}/v5/market/instruments-info", self.base_url);

        let params = [
            ("category", category),
        ];

        let response = self.client.get(&url)
            .query(&params)
            .send()
            .await?
            .json::<BybitResponse<serde_json::Value>>()
            .await?;

        if response.ret_code != 0 {
            return Err(anyhow::anyhow!("Bybit API error: {}", response.ret_msg));
        }

        let result = response.result.ok_or_else(|| anyhow::anyhow!("No result"))?;
        let list = result["list"].as_array().ok_or_else(|| anyhow::anyhow!("No list"))?;

        let mut instruments = Vec::new();

        for item in list {
            let symbol = item["symbol"].as_str().unwrap_or("").to_string();

            // Parse leverage filter
            let leverage_filter = BybitLeverageFilter {
                min_leverage: item["leverageFilter"]["minLeverage"].as_str().unwrap_or("1").parse::<f64>().unwrap_or(1.0),
                max_leverage: item["leverageFilter"]["maxLeverage"].as_str().unwrap_or("100").parse::<f64>().unwrap_or(100.0),
                leverage_step: item["leverageFilter"]["leverageStep"].as_str().unwrap_or("0.01").parse::<f64>().unwrap_or(0.01),
            };

            // Parse price filter
            let price_filter = BybitPriceFilter {
                min_price: item["priceFilter"]["minPrice"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                max_price: item["priceFilter"]["maxPrice"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                tick_size: item["priceFilter"]["tickSize"].as_str().unwrap_or("0.01").parse::<f64>().unwrap_or(0.01),
            };

            // Parse lot size filter
            let lot_size_filter = BybitLotSizeFilter {
                max_trading_qty: item["lotSizeFilter"]["maxOrderQty"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                min_trading_qty: item["lotSizeFilter"]["minOrderQty"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
                qty_step: item["lotSizeFilter"]["qtyStep"].as_str().unwrap_or("0.01").parse::<f64>().unwrap_or(0.01),
            };

            let instrument = BybitInstrument {
                symbol,
                leverage_filter,
                price_filter,
                lot_size_filter,
            };

            instruments.push(instrument);
        }

        Ok(BybitInstrumentInfo {
            category: category.to_string(),
            list: instruments,
        })
    }

    /// Get funding rate
    pub async fn get_funding_rate(&self, symbol: &str) -> Result<BybitFundingRate> {
        let url = format!("{}/v5/market/funding/history", self.base_url);

        let params = [
            ("category", "linear"),
            ("symbol", symbol),
            ("limit", "1"),
        ];

        let response = self.client.get(&url)
            .query(&params)
            .send()
            .await?
            .json::<BybitResponse<serde_json::Value>>()
            .await?;

        if response.ret_code != 0 {
            return Err(anyhow::anyhow!("Bybit API error: {}", response.ret_msg));
        }

        let result = response.result.ok_or_else(|| anyhow::anyhow!("No result"))?;
        let list = result["list"].as_array().ok_or_else(|| anyhow::anyhow!("No list"))?;

        if list.is_empty() {
            return Err(anyhow::anyhow!("No funding rate data"));
        }

        let item = &list[0];

        let funding_rate = BybitFundingRate {
            symbol: item["symbol"].as_str().unwrap_or("").to_string(),
            funding_rate: item["fundingRate"].as_str().unwrap_or("0").parse::<f64>().unwrap_or(0.0),
            funding_rate_timestamp: item["fundingRateTimestamp"].as_str().unwrap_or("0").parse::<i64>().unwrap_or(0),
        };

        Ok(funding_rate)
    }

    /// Set leverage
    pub async fn set_leverage(&self, symbol: &str, leverage: u32) -> Result<()> {
        let url = format!("{}/v5/position/set-leverage", self.base_url);

        let mut params = HashMap::new();
        params.insert("category".to_string(), "linear".to_string());
        params.insert("symbol".to_string(), symbol.to_string());
        params.insert("buyLeverage".to_string(), leverage.to_string());
        params.insert("sellLeverage".to_string(), leverage.to_string());

        let timestamp = self.get_timestamp();
        let signature = self.generate_signature(timestamp, &params);

        let response = self.client.post(&url)
            .json(&params)
            .header("X-BAPI-API-KEY", &self.api_key)
            .header("X-BAPI-SIGN", signature)
            .header("X-BAPI-TIMESTAMP", timestamp.to_string())
            .header("X-BAPI-RECV-WINDOW", "5000")
            .send()
            .await?
            .json::<BybitResponse<serde_json::Value>>()
            .await?;

        if response.ret_code != 0 {
            return Err(anyhow::anyhow!("Bybit API error: {}", response.ret_msg));
        }

        Ok(())
    }
}
